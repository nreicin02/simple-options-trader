classDiagram
    class User {
        +uuid id
        +string email
        +string password_hash
        +string first_name
        +string last_name
        +ExperienceLevel experience_level
        +date created_at
        +date updated_at
        +boolean email_verified
        +boolean two_factor_enabled
        +authenticate(credentials) bool
        +updateProfile(profile_data) User
    }

    class UserPreference {
        +uuid user_id
        +json notification_settings
        +json ui_preferences
        +json risk_tolerance
        +getPreference(key) any
        +updatePreference(key, value) bool
    }

    class FinancialAccount {
        +uuid id
        +uuid user_id
        +string provider_id
        +string account_number
        +string account_type
        +string status
        +float balance
        +float buying_power
        +date linked_at
        +getBalance() float
        +updateBalance() void
    }

    class ProviderConnection {
        +uuid id
        +uuid user_id
        +string provider_name
        +string access_token
        +string refresh_token
        +date token_expires_at
        +json connection_metadata
        +boolean is_active
        +refreshToken() bool
        +revokeAccess() bool
    }

    class Watchlist {
        +uuid id
        +uuid user_id
        +string name
        +date created_at
        +date updated_at
        +addSymbol(symbol) bool
        +removeSymbol(symbol) bool
    }

    class WatchlistItem {
        +uuid watchlist_id
        +string symbol
        +date added_at
        +json custom_notes
    }

    class TradingIntention {
        +uuid id
        +string name
        +string description
        +json parameters
        +string intention_type
        +mapToStrategies() Strategy[]
    }

    class Strategy {
        +uuid id
        +string name
        +string plain_text_description
        +string technical_description
        +json parameters
        +json risk_profile
        +generateTrades(parameters) Trade[]
        +calculateMetrics(market_data) json
    }

    class Trade {
        +uuid id
        +uuid user_id
        +uuid account_id
        +uuid strategy_id
        +string status
        +date created_at
        +date executed_at
        +json parameters
        +float cost_basis
        +validateTrade() bool
        +executeTrade() bool
        +cancelTrade() bool
    }

    class Position {
        +uuid id
        +uuid user_id
        +uuid account_id
        +uuid trade_id
        +string symbol
        +string position_type
        +float quantity
        +float entry_price
        +date opened_at
        +date expires_at
        +json greeks
        +calculateCurrentValue(market_data) float
        +calculateProfitLoss() float
    }

    class MarketData {
        +string symbol
        +float last_price
        +float bid
        +float ask
        +float volume
        +date timestamp
        +json options_chain
        +getOptionPrice(strike, expiry, type) float
        +getImpliedVolatility(strike, expiry, type) float
    }

    class EducationalContent {
        +uuid id
        +string title
        +string content_type
        +string difficulty_level
        +string content_url
        +json related_concepts
        +json triggers
    }

    class Notification {
        +uuid id
        +uuid user_id
        +string type
        +string message
        +boolean read
        +date created_at
        +json metadata
        +markAsRead() void
        +deliver() bool
    }

    class FinancialServiceProvider {
        +string id
        +string name
        +string api_version
        +json capabilities
        +json connection_parameters
        +validateCredentials(credentials) bool
        +executeOrder(order) OrderResult
        +fetchMarketData(symbols) MarketData[]
    }

    class IntegrationAdapter {
        +string provider_id
        +json connection_config
        +initialize() bool
        +translateOrder(order) json
        +executeRequest(endpoint, params) json
        +handleResponse(response) any
    }

    User "1" -- "1" UserPreference: has
    User "1" -- "*" FinancialAccount: owns
    User "1" -- "*" ProviderConnection: maintains
    User "1" -- "*" Watchlist: creates
    Watchlist "1" -- "*" WatchlistItem: contains
    User "1" -- "*" Trade: places
    Trade "1" -- "1" Strategy: uses
    Trade "1" -- "*" Position: creates
    Strategy "*" -- "*" TradingIntention: mapped to
    FinancialAccount "1" -- "*" Position: holds
    Position "*" -- "1" MarketData: priced with
    User "1" -- "*" Notification: receives
    FinancialServiceProvider "1" -- "*" FinancialAccount: provides
    FinancialServiceProvider "1" -- "1" IntegrationAdapter: adapts to